<?phpnamespace App\Http\Controllers\Foreground\Service;use App\Facades\ActivityRepositoryFacade;use App\Facades\FunctionRepositoryFacade;use App\Facades\ProductRepositoryFacade;use App\Facades\UserRepositoryFacade;use App\Http\Controllers\ForeController;use App\Mspecs\M3Result;class ActivityController extends ForeController{    public function __construct()    {        $this->jsonMspecs = new M3Result();    }    /***活动页面短信发送ajax**/    public function sendMessage()    {        $code = $this->checkParam();        if ($code != '100000') {            return $this->jsonMspecs->toJson();//参数存在问题，直接返回json        }        $number = $_REQUEST['number'];//前端获取的手机号        $content = $_REQUEST['content'];//短信内容        $nickname = $_REQUEST['nickname'];//发送昵称        $goodsname = $_REQUEST['goodsname'];//商品名称        $gid=ProductRepositoryFacade::findGidWithObjectId($_REQUEST['gid']);        $uid = session('user.id');//用户id        $needpay = 0;        $this->needPayAnyWay($uid) > 20 && $needpay = 1;//超过20条短信收费控制        $data = [];        $msg = [];        $is_send = true;//控制是否发送这批短信        if (is_array($number)) {            foreach ($number as $key => $val) {                //检测手机号是否已经在我们平台进行注册                $member = $this->isMember($val);                if ($needpay == 1 || $member['code'] > 0) {                    $msg[$key]['number'] = $val;                    $msg[$key]['ismember'] = 'yes';                    $is_send = false;                } else {                    //手机号码没有注册过                    $msg[$key]['number'] = $val;                    $msg[$key]['ismember'] = 'no';                }            }        } else {            //检测手机号是否已经在我们平台进行注册            $member = $this->isMember($number);            if ($needpay == 1 || $member['code'] > 0) {                $msg[0]['number'] = $number;                $msg[0]['ismember'] = 'yes';                $is_send = false;            } else {                //手机号码没有注册过                $msg[0]['number'] = $number;                $msg[0]['ismember'] = 'no';            }        }        if ($is_send === true) {                $data = $this->getTmpIdAndContent($content, $nickname, $goodsname, $gid);                $this->sendSms($msg, $data['content'], $data['tmpid'], $uid,$content.config('global.domain_m2_m2').'/register/?code='.session('user.phone').'&g_id='.$gid);//所有验证通过，最终执行发送短信                $data['msg'] = $msg;        } else {            $data['msg'] = $msg;        }        $data['is_send'] = $is_send ? 'send' : 'nosend';//返回给前端的数据，表示这次短信是否成功发送        return $this->packageData($data);    }    /**短信支付*/    public function paySms()    {        $code = $this->checkParam();        if ($code != '100000') {            return $this->jsonMspecs->toJson();//参数存在问题，直接返回json        }        $number = $_REQUEST['number'];//前端获取的手机号        $content = $_REQUEST['content'];//短信内容        $nickname = $_REQUEST['nickname'];//发送昵称        $goodsname = $_REQUEST['goodsname'];//商品名称        $gid=ProductRepositoryFacade::findGidWithObjectId($_REQUEST['gid']);        $uid = session('user.id');//用户id        $needpay = 0;        $this->needPayAnyWay($uid) > 20 && $needpay = 1;//超过20条短信收费控制        $data = [];        $msg = [];        //分解参数，统计总共需要支付的金额        $moneycount = 0;        if (is_array($number)) {            foreach ($number as $key => $val) {                //检测手机号是否已经在我们平台进行注册                $member = $this->isMember($val);                if ($needpay == 1 || $member['code'] > 0) {                    $msg[$key]['number'] = $val;                    $msg[$key]['ismember'] = 'yes';                    $moneycount += 1;//对moneycount进行加1                }else{                    $msg[$key]['number']=$val;                    $msg[$key]['ismember']='no';                }            }        } else {            //检测手机号是否已经在我们平台进行注册            $member = $this->isMember($number);            if ($needpay == 1 || $member['code'] > 0) {                $msg[0]['number'] = $number;                $msg[0]['ismember'] = 'yes';                $moneycount += 1;//对moneycount进行加1            } else {                //手机号码没有注册过                $msg[0]['number'] = $number;                $msg[0]['ismember'] = 'no';            }        }        //更新用户的余额，如果成功，执行短信发送。        $ispay = UserRepositoryFacade::reduceMoney($uid, $moneycount);        if ($ispay) {            UserRepositoryFacade::moneyChangeLog($uid, $moneycount, 0, '发送活动短信消费');//记录余额消费日志            $data = $this->getTmpIdAndContent($content, $nickname, $goodsname, $gid);            $this->sendSms($msg, $data['content'], $data['tmpid'], $uid,$content.config('global.domain_m2').'/register/?code='.session('user.phone').'&g_id='.$gid);//所有验证通过，最终执行发送短信            $data['msg'] = $msg;            $data['ispay'] = '1';        }       //支付失败，反馈用户支付失败信息，提示用户去充值界面。        else {            $data['msg'] = $msg;            $data['ispay'] = '0';        }        return $this->packageData($data);    }    /**发送短信方法*/    private function sendSms(&$msg, $content, $tmpid, $uid,$origin_content)    {        foreach ($msg as $key => $val) {            //获取短信发送号码            $number = $val['number'];            //获取短信是否需要收费            $ismember = $val['ismember'] == 'no' ? 0 : 1;            //执行发送函数            $resp =$this->sendtplsms($val['number'], $tmpid, $content);            if ($resp['code'] == '0') {                //发送成功，记录日志                //uid,number,needpay,unit_price,ispay,content,tmpid,is_send                ActivityRepositoryFacade::createActivitySmsLog($uid, $number, $ismember, $ismember, 1, $origin_content, $tmpid, 1);                $msg[$key]['issend'] = '1';            } else {                //发送失败，记录日志,记录失败原因                ActivityRepositoryFacade::createActivitySmsLog($uid, $number, $ismember, $ismember, 1, $origin_content, $tmpid, 0, $resp['resultText']);                $msg[$key]['issend'] = '0';            }        }        //TODO 如果存在已经支付但是并未发送成功的短信，从log中读取，重新执行发送函数。    }    /**商品搜索接口**/    public function search()    {        $key = $_REQUEST['keyword'];        return $this->packageData(ProductRepositoryFacade::findGoodsWithLike($key, 10));    }    /**根据内容获取短信模板id,组织参数**/    public function getTmpIdAndContent($content, $nickname, $goodsname, $gid)    {        /*  ★天天免费默认短信一，模板ID:21962              客官，我是XXX（姓名），我送了XXX（用户选择的商品）给你，赶快去领取！            ★天天免费默认短信二，模板ID:21963              亲，三生有幸与你相识，送你xxx表示一下，快来拿吧！我是xxx*/        //检测字符串来返回模版id        $send_phone=!empty(session('user.phone'))?session('user.phone'):'';        if(strpos('客官',$content)==0){            $data['tmpid'] = '21962';            $data['content'] = $nickname.','.$goodsname.','.config('global.domain_m2').'/register/?code='.$send_phone.'&g_id='.$gid;            return $data;        }        if(strpos('亲',$content)==0){            $data['tmpid']='21963';            $data['content']=$goodsname.','.$nickname.','.config('global.domain_m2').'/register/?code='.$send_phone.'&g_id='.$gid;;            return $data;        }        //default        $data['tmpid']='21963';        $data['content']=$goodsname.','.$nickname.','.config('global.domain_m2').'/register?code='.$send_phone.'&g_id='.$gid;;        return $data;    }    /**根据手机号判断用户是否已经是注册用户**/    public function isMember($number)    {        return json_decode(FunctionRepositoryFacade::getCurl(config('global.api.base_url') . config('global.api.isRegister') . '?user_name=' . $number), true);    }    /**根据用户uid判断今日用户发送短信数是否超过20条，如果超过20条则进入收费阶段**/    public function needPayAnyWay()    {        $uid = session('user.id');        return ActivityRepositoryFacade::getSendCountToday($uid);    }    public function checkParam()    {        $number = $_REQUEST['number'];//前端获取的手机号        $content = $_REQUEST['content'];//短信内容        $nickname = $_REQUEST['nickname'];//发送者昵称        $goodsname = $_REQUEST['goodsname'];//发送的商品名称        $uid = session('user.id');//用户id        if (!$uid) {            $this->jsonMspecs->status = '100001';            $this->jsonMspecs->message = '请先登录!';            $this->jsonMspecs->data = array();            return '100001'; //用户未登录        }        if (!$content) {            $this->jsonMspecs->status = '100002';            $this->jsonMspecs->message = '发送内容不能为空!';            $this->jsonMspecs->data = array();            return '100002'; //发送内容为空        }        if (is_array($number)) {            foreach ($number as $key => $val) {                if (preg_match('/^1\d{10}$/', $val)) {                } else {                    $this->jsonMspecs->status = '100003';                    $this->jsonMspecs->message = '手机号不存在，请检查手机号！';                    $this->jsonMspecs->data = array();                    return '100003';//存在不合法手机号码                }            }        } else {            if (preg_match('/^1\d{10}$/', $number)) {            } else {                $this->jsonMspecs->status = '100003';                $this->jsonMspecs->message = '手机号不存在，请检查！';                $this->jsonMspecs->data = array();                return '100003';//存在不合法手机号码            }        }        if (empty($nickname) || empty($goodsname)) {            $this->jsonMspecs->status = '100004';            $this->jsonMspecs->message = '发送内容和称呼不能为空！';            $this->jsonMspecs->data = array();            return '100004';//发送参数错误        }        return '100000';//校验通过    }    public function packageData(Array $data)    {        //封装数据        if (is_array($data) && !empty($data)) {            $this->jsonMspecs->status = '0';            $this->jsonMspecs->message = 'success';            $this->jsonMspecs->data = $data;        } else {            $this->jsonMspecs->status = '100001';            $this->jsonMspecs->message = 'fail';            $this->jsonMspecs->data = array();        }        return $this->jsonMspecs->toJson();    }}